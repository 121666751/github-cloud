<?xml version="1.0" encoding="UTF-8"?>
<!-- 增加了 xmlns:task 对应xsi:schemaLocation增加了2行 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
		<!-- xmlns:task="http://www.springframework.org/schema/task" 
			 http://www.springframework.org/schema/task
			 http://www.springframework.org/schema/task/spring-task-3.2.xsd -->
	<!-- 以下为SpringMVC配置 -->

	<!-- 自动扫描@Controller注入为bean -->
	<context:component-scan base-package="cn.spring.mvn.client.web.controller" />
	<!-- https://blog.csdn.net/HaKimKing/article/details/53145141
		 对进入 DispatcherServlet 的请求进行筛查, 
		 如果发现是没有经过映射的请求, 就将该请求交由 WEB 应用服务器默认的Servlet 处理
	 -->
	<mvc:default-servlet-handler/>
	<mvc:annotation-driven/>
	
	<mvc:annotation-driven>
		<!--返回json数据,@response使用 -->
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 对模型视图名称的解析,即在模型视图名称添加前后缀 -->
	<!-- <bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp" />
		<property name="suffix" value=".jsp" />
	</bean> -->
	 <!--多个视图解析器-->
 
	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
	    <property name="templateLoaderPath">
	        <value>/html/</value><!-- 相当于html解析器的前缀prefix -->
	    </property>
	    <property name="freemarkerSettings">
	        <props>
	            <prop key="template_update_delay">1</prop>
	            <prop key="default_encoding">UTF-8</prop><!-- 防止页面中文乱码 -->
	            <prop key="number_format">0.##</prop>
	            <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
	        </props>
	    </property>
	</bean>
	<!--html解析器,freeMarkerviewResolver需要配置上面freemarkerConfig-->
	<bean id="htmlviewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
	    <property name="suffix" value=".html"/>
	    <property name="order" value="0"/>
	    <property name="contentType" value="text/html;charset=UTF-8"/>
	</bean>
	<!--jsp解析器,InternalResourceViewResolver需要配置再最后,order值(优先级最低)最高,要比其他解析器低,因为不管其优先级如何,最后一定会执行,但是优先级高于其他解析器会导致其他解析器不起作用 -->
	<bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	    <property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView"/>
	    <property name="prefix" value="/jsp/"/>
	    <property name="suffix" value=".jsp"/>
	    <property name="contentType" value="text/html;charset=UTF-8"/>
	    <property name="order" value="0"/>
	</bean>
	
	
	<!-- 3：配置多个ViewResolver视图解析 -->
    <!-- 3.1 配置velocity的配置信息 -->
    <bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <!-- 这里的路径回合下面layoutUrl和prefix中的路径组合 -->
        <property name="resourceLoaderPath" value="/"/>
        <property name="velocityProperties">
            <props>
                <prop key="input.encoding">UTF-8</prop>
                <prop key="output.encoding">UTF-8</prop>
                <prop key="contentType">text/html;charset=UTF-8</prop>
            </props>
        </property>
    </bean>
    <!-- 3.2 配置多个视图解析 -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="viewResolvers">
            <list>
                <!-- <bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
                    <property name="cache" value="true"/>
                    velocity的order要小于jsp的,velocity和html的order优先级大小无所谓,都能正常解析并显示
                    <property name="order" value="2"/>
                    <property name="suffix" value=".vm"/>
                    这里的路径会加上resourceLoaderPath的路径
                    <property name="layoutUrl" value="/WEB-INF/velocity/layout/default.vm"/>
                    <property name="prefix" value="/WEB-INF/velocity/"/>
                    <property name="contentType" value="text/html;charset=UTF-8"/>
                </bean> -->
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="prefix" value="/WEB-INF/jsp/"/>
                    <property name="suffix" value=".jsp"/>
                    <!-- 注意：JSP的优先级要最低,即order要大,否则,HTML和velocity的页面会被解析到*.jsp -->
                    <property name="order" value="3" />
                </bean>
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass" value="org.knight.common.HtmlResourceView"/><!-- 改成你自己的第一步新建的解析类路径 -->  
                    <property name="prefix" value="/WEB-INF/html/"/>
                    <property name="suffix" value=".html"/>
                    <!-- 注意：自定义的HTML一定要比JSF的优先级高,即order要小,否则,HTML的页面会被解析成jsp -->
                    <property name="order" value="1" />
                </bean>
            </list>
        </property>
    </bean>
</beans>